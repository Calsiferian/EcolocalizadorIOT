<html>
<head>
  <meta charset="UTF-8">

  <!-- PLEASE NO CHANGES BELOW THIS LINE (UNTIL I SAY SO) -->
  <script language="javascript" type="text/javascript" src="p5.js"></script>
  
  <!-- OK, YOU CAN MAKE CHANGES BELOW THIS LINE AGAIN -->

  <!-- This line removes any default padding and style. 
       You might only need one of these values set. -->
  <style> body {padding: 0; margin: 0;} </style>
</head>

<body>
<script type="text/javascript">
function setup() {
  
createCanvas(1920, 1080);
smooth();
 
 
 
}

var DistAng;
var Dist;
var Ang;
 webSocket= new WebSocket('ws://' + location.hostname + ':81/', ['arduino']);
  
  webSocket.onerror = function(error) {
    console.log('WebSocket Error ', error);
  };
  webSocket.onmessage = function(e) {

DistAng=e.data;
 
 Dist=DistAng.substr(0,DistAng.indexOf(":"));
 Ang=DistAng.substr(DistAng.indexOf(":")+1,DistAng.length);
 console.log(DistAng, Dist, Ang);
};

function draw() {
  
  fill(98,245,31);
  
  // simulating motion blur and slow fade of the moving line
  noStroke();
  fill(0,4); 
  rect(0, 0, width, 1010); 
  
  fill(98,245,31); // green color
  // calls the functions for drawing the radar
  drawRadar(); 
 drawLine();
 drawObject();
 drawText();
}

function drawRadar() {
  push();
  translate(960,1000); // moves the starting coordinats to new location
  noFill();
  strokeWeight(2);
  stroke(98,245,31);
  // draws the arc lines
  arc(0,0,1800,1800,PI,TWO_PI);
  arc(0,0,1400,1400,PI,TWO_PI);
  arc(0,0,1000,1000,PI,TWO_PI);
  arc(0,0,600,600,PI,TWO_PI);
  // draws the angle lines
  line(-960,0,960,0);
  line(0,0,-960*cos(radians(30)),-960*sin(radians(30)));
  line(0,0,-960*cos(radians(60)),-960*sin(radians(60)));
  line(0,0,-960*cos(radians(90)),-960*sin(radians(90)));
  line(0,0,-960*cos(radians(120)),-960*sin(radians(120)));
  line(0,0,-960*cos(radians(150)),-960*sin(radians(150)));
  line(-960*cos(radians(30)),0,960,0);
  pop();
}

function drawLine() {
  push();
 strokeWeight(9);
  stroke(30,250,60);
  translate(960,1000); // moves the starting coordinats to new location
  line(0,0,950*cos(radians(Ang)),-950*sin(radians(Ang))); // draws the line according to the angle
  pop();
}
function drawObject() {
  push();
  translate(960,1000); // moves the starting coordinats to new location
  strokeWeight(9);
  stroke(255,10,10); // red color
    // covers the distance from the sensor from cm to pixels
  // limiting the range to 40 cms
 
    // draws the object according to the angle and the distance
  line(Dist*2*cos(radians(Ang)),-Dist*2*sin(radians(Ang)),950*cos(radians(Ang)),-950*sin(radians(Ang)));
   pop();
}
function drawText() { // draws the texts on the screen
  var noObject;
  push();
 if(Dist>400) {
  noObject = "Out of Range";
  }
  else {
  noObject = "In Range";
  }
  fill(0,0,0);
  noStroke();
  rect(0, 1010, width, 1080);
  fill(98,245,31);
  textSize(25);
  text("1.3 m",1180,990);
  text("2.3 m",1380,990);
  text("3.3 m",1580,990);
  text("4.3 m",1780,990);
  textSize(40);
  text("Object: " + noObject, 240, 1050);
  text("Angle: " + Ang +" °", 1050, 1050);
  text("Distance: ", 1350, 1050);
  
  text("        " + Dist +" Cm", 1500, 1050);
  
  textSize(25);
  fill(98,245,60);
  translate(961+960*cos(radians(30)),982-960*sin(radians(30)));
  rotate(-radians(-60));
  text("30°",0,0);
  resetMatrix();
  translate(954+960*cos(radians(60)),984-960*sin(radians(60)));
  rotate(-radians(-30));
  text("60°",0,0);
  resetMatrix();
  translate(945+960*cos(radians(90)),990-960*sin(radians(90)));
  rotate(radians(0));
  text("90°",0,0);
  resetMatrix();
  translate(935+960*cos(radians(120)),1003-960*sin(radians(120)));
  rotate(radians(-30));
  text("120°",0,0);
  resetMatrix();
  translate(940+960*cos(radians(150)),1018-960*sin(radians(150)));
  rotate(radians(-60));
  text("150°",0,0);
  pop(); 
}
</script>
</body>
</html>
